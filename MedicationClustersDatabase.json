{
    "A02BC": {
        "geneesmiddelen": [
            {"naam": "Geneesmiddel1", "atc7": "A02BC02"},
            {"naam": "Geneesmiddel2", "atc7": "A02BC01"},
            {"naam": "Geneesmiddel3", "atc7": "A02BC05"},
            {"naam": "Geneesmiddel4", "atc7": "A02BC04"},
            {"naam": "Geneesmiddel5", "atc7": "A02BC03"}
        ]
    },
    "A02BA": {
        "geneesmiddelen": [
            {"naam": "Geneesmiddel6", "atc7": "A02BA01"},
            {"naam": "Geneesmiddel7", "atc7": "A02BA02"}
        ]
    }
}

def get_atc7_codes_for_atc5(data, atc5_code):
    """
    Haalt alle atc7-codes op binnen een geselecteerde atc5-cluster.
    
    :param data: De JSON-database als dictionary.
    :param atc5_code: De geselecteerde atc5-code.
    :return: Een lijst van atc7-codes binnen het cluster.
    """
    if atc5_code not in data:
        raise ValueError(f"ATC5-code {atc5_code} niet gevonden in de database.")
    
    geneesmiddelen = data[atc5_code]["geneesmiddelen"]
    atc7_codes = [geneesmiddel["atc7"] for geneesmiddel in geneesmiddelen]
    return atc7_codes

# Voorbeeldgebruik:
# Stel dat `database` de JSON-database is ingeladen als een Python-dictionary.
# atc7_codes = get_atc7_codes_for_atc5(database, "A02BC")
# print(atc7_codes)  # Output: ['A02BC02', 'A02BC01', 'A02BC05', 'A02BC04', 'A02BC03']
