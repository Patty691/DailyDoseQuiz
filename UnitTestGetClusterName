import unittest
from unittest.mock import patch
from io import StringIO
import requests
from bs4 import BeautifulSoup

# De functie die getest moet worden
def get_atc_cluster_name(atc5_code):
    url = f"https://www.gipdatabank.nl/databank?infotype=g&label=00-totaal&tabel=B_01-basis&geg=gebr&item={atc5_code}"

    try:
        response = requests.get(url)
        response.raise_for_status()  # Check if request was successful
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract the cluster name from the text
        text = soup.get_text()
        
        if ":" in text:
            cluster_name = text.split(":")[1].strip()
        else:
            cluster_name = "Unknown"

        return cluster_name
    except Exception as e:
        return "Unknown"

class TestGetAtcClusterName(unittest.TestCase):
    
    # Mocking requests.get om een voorbeeldresponse te simuleren
    @patch('requests.get')
    def test_get_atc_cluster_name_success(self, mock_get):
        # De mock-response die we willen simuleren
        mock_response = requests.Response()
        mock_response.status_code = 200
        mock_response._content = b"Aantal gebruikers 2019-2023 voor ATC-subgroep C10AA : Cholesterolsyntheseremmers"
        
        # Stel de mock in om de gesimuleerde response terug te geven
        mock_get.return_value = mock_response
        
        # Test met ATC5-code "C10AA"
        result = get_atc_cluster_name("C10AA")
        
        # Verwachte clusternaam
        expected_result = "Cholesterolsyntheseremmers"
        
        # Controleer of de clusternaam correct is
        self.assertEqual(result, expected_result)

    # Mocking voor foutgevallen, bijvoorbeeld als de pagina niet goed geladen kan worden
    @patch('requests.get')
    def test_get_atc_cluster_name_failure(self, mock_get):
        # Stel de mock in voor een mislukte HTTP-aanroep (bijv. 404)
        mock_response = requests.Response()
        mock_response.status_code = 404
        mock_get.return_value = mock_response
        
        # Test met ATC5-code "C10AA"
        result = get_atc_cluster_name("C10AA")
        
        # Verwachte uitkomst bij een fout is "Unknown"
        expected_result = "Unknown"
        
        # Controleer of de fout goed wordt afgehandeld
        self.assertEqual(result, expected_result)

    # Testen van ATC-code die geen clusternaam oplevert
    @patch('requests.get')
    def test_get_atc_cluster_name_no_colon(self, mock_get):
        # Mock voor een geval waarin er geen dubbele punt in de tekst is
        mock_response = requests.Response()
        mock_response.status_code = 200
        mock_response._content = b"Aantal gebruikers 2019-2023 voor ATC-subgroep C10AA zonder naam"
        
        # Stel de mock in om de gesimuleerde response terug te geven
        mock_get.return_value = mock_response
        
        # Test met ATC5-code "C10AA"
        result = get_atc_cluster_name("C10AA")
        
        # Verwachte uitkomst: omdat er geen dubbele punt is, zou "Unknown" moeten worden teruggegeven
        expected_result = "Unknown"
        
        # Controleer of de waarde "Unknown" wordt teruggegeven
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()